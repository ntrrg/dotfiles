set nocompatible

set history=100
set nobackup
set autoread
set encoding=utf8
set fileformats=unix,dos,mac
set sessionoptions-=options
set sessionoptions-=folds

" -----------------------------------------------------------------------------
" UI

set colorcolumn=81
set nonumber
set relativenumber
set signcolumn=number
set ruler
set laststatus=2
set mouse=a
set ttymouse=sgr
set nomodeline
set wildmenu
set showcmd
set updatetime=500
set balloondelay=250
set completeopt+=popup
set completepopup=align:menu,highlight:Pmenu
set splitbelow
set splitright

if ! has('gui_running')
  set t_Co=256
endif

set background=dark
colors monokai

hi def link stNormal     Normal
hi def link stBuffNumber Number
hi def link stBuffName   Title
hi def link stBuffPos    Number
hi def link stBuffProps  Function

set statusline=
set statusline+=%#stNormal#
set statusline+=\ ⬓\ 

set statusline+=%#stBuffNumber#
set statusline+=[%n]

set statusline+=%#stNormal#\ 

set statusline+=%#stBuffName#
set statusline+=%t\ %m

set statusline+=%#stNormal#
set statusline+=\ %=\ 

set statusline+=%#stBuffPos#
set statusline+=%l:%c%V

set statusline+=%#stNormal#
set statusline+=\ %<

set statusline+=%#stBuffPos#
set statusline+=%P

set statusline+=%#stNormal#\ 

set statusline+=%#stBuffProps#
"set statusline+=\|\ %{&term}\ 
set statusline+=\|\ %{&fileformat}\ 
set statusline+=\|\ %{&encoding}\ 
set statusline+=\|\ %{TabStyle()}:%{&shiftwidth}\ 
set statusline+=\|\ %Y\ 
set statusline+=\|

function! TabStyle()
  return &expandtab == 1 ? 'S' : 'T'
endfunction

" -----------------------------------------------------------------------------
" File formatting and editing

syntax on

let g:netrw_sort_sequence = '[\/]$,*,\.[ao]$,\.obj$,\.info$,\.swp$,\.bak$,\~$'
set listchars=precedes:…,tab:-›,space:·,trail:·,extends:…,eol:¶
set nowrap
set autoindent
filetype indent on
set smarttab
set expandtab tabstop=2 shiftwidth=2
set nofixendofline

autocmd BufRead,BufNewFile go.mod setlocal filetype=gomod
autocmd BufRead,BufNewFile go.sum setlocal filetype=gosum
autocmd BufRead,BufNewFile *.astro setlocal filetype=astro
autocmd BufRead,BufNewFile *.gohtml setlocal filetype=gohtml
autocmd BufRead,BufNewFile *.gotmpl,*.gotxt,*.tmpl setlocal filetype=gotmpl
autocmd BufRead,BufNewFile *.mdx setlocal filetype=markdown
autocmd BufRead,BufNewFile *.slide setlocal filetype=markdown
autocmd BufRead,BufNewFile *.svelte setlocal filetype=html
autocmd BufRead,BufNewFile *.trigger setlocal filetype=sh
autocmd BufRead,BufNewFile *.vue setlocal filetype=html
autocmd BufRead,BufNewFile *.zig,*.zon setlocal filetype=zig
autocmd BufRead,BufNewFile *.zir setlocal filetype=zir

autocmd Filetype c setlocal noexpandtab
autocmd Filetype cpp setlocal noexpandtab
autocmd Filetype go,gomod,gosum setlocal noexpandtab
autocmd Filetype make setlocal noexpandtab
autocmd Filetype markdown setlocal tabstop=4 shiftwidth=4
autocmd Filetype python setlocal tabstop=4 shiftwidth=4
autocmd Filetype rst setlocal tabstop=4 shiftwidth=4
autocmd Filetype sh setlocal noexpandtab
autocmd Filetype zig,zir,zon setlocal tabstop=4 shiftwidth=4

" -----------------------------------------------------------------------------
" Searching

set incsearch
set hlsearch
set magic

" -----------------------------------------------------------------------------
" Commands

function! RemoveQFItem()
  let curqfidx = line('.') - 1
  let qfall = getqflist()
  call remove(qfall, curqfidx)
  call setqflist(qfall, 'r')
  execute curqfidx + 1 . "cfirst"
  :copen
endfunction

:command! RemoveQFItem :call RemoveQFItem()

" -----------------------------------------------------------------------------
" Keys

nmap <Space> <Leader>

set backspace=indent,eol,start

" Quick Fix
nnoremap <Leader>p :cprev<CR>
nnoremap <Leader>n :cnext<CR>
nnoremap <Leader>P :cfirst<CR>
nnoremap <Leader>N :clast<CR>
autocmd FileType qf map <buffer> dd :RemoveQFItem<cr>

" -----------------------------------------------------------------------------
" Plugins

filetype plugin on

"""""""""""
" vim-lsp "
"""""""""""

"let g:lsp_diagnostics_enabled = 0
"let g:lsp_document_highlight_enabled = 0
"hi lspReference ctermfg=red guifg=red ctermbg=green guibg=green

if executable('gopls')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'gopls',
    \ 'cmd': {server_info->['gopls']},
    \ 'allowlist': ['go'],
    \ })
endif

if executable('zls')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'zls',
    \ 'cmd': {server_info->['zls']},
    \ 'allowlist': ['zig'],
    \ })
endif

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

  nmap <buffer> <Leader>s <plug>(lsp-document-symbol-search)
  nmap <buffer> <Leader>S <plug>(lsp-workspace-symbol-search)
  nmap <buffer> <Leader>d <plug>(lsp-peek-definition)
  nmap <buffer> <Leader>D <plug>(lsp-definition)
  nmap <buffer> <Leader>i <plug>(lsp-peek-implementation)
  nmap <buffer> <Leader>I <plug>(lsp-implementation)
  nmap <buffer> <Leader>t <plug>(lsp-peek-type-definition)
  nmap <buffer> <Leader>T <plug>(lsp-type-definition)
  nmap <buffer> <Leader>R <plug>(lsp-references)
  nmap <buffer> <Leader>, <plug>(lsp-previous-reference)
  nmap <buffer> <Leader>. <plug>(lsp-next-reference)
  nmap <buffer> <Leader>! <plug>(lsp-next-diagnostic)

  nmap <buffer> <Leader>r <plug>(lsp-rename)

  nmap <buffer> K <plug>(lsp-hover)
  nmap <buffer> <expr><c-j> lsp#scroll(+4)
  nmap <buffer> <expr><c-k> lsp#scroll(-4)

  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre * call execute('LspDocumentFormatSync')

  " File type.
  "autocmd FileType go nmap <buffer> gd <plug>(lsp-definition)

  " File extension.
  "autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
